>"NRTS"4#v($$"KCOS"4#v($$"RGNF"4#v(v
         >    >      >     >     >0 a".stnirpregnif dab/gnissiM">:#,_@
v       )^#  D^#1L' D^#1A'C^#2C'2Q'<
 Save settings like IP and cmd char                v 0*aa0)S+*aaa0**aaa*aa" "<
>  f2P  41p  #vIv                                  > 0"89b.tognuf"#@i$$$$     v
v G1fP1f   p10>#<0a".sserdda PI dilavnI">:#,_@       reload clear loop
 Build initial login packet at (0,0)                    done here
>0" KCIN"00PN5+11p50P11g:d\0p1+:a\0p1+11p0ad   v
vp11++2*93g11P0g11"USER fungot * * :fungot-0.1"<
 Create a socket and connect to server
>221#vSv
vp12:>#<0a".tekcos a etaerc ot elbanU">:#,_@
>20"7666"V01g#vCv
v             >#<0a".tcennoc ot elbanU">:#,_@
 Send out the registration packet.
>0011g21g#vW11g-!#v_0a".deliaf dnes kciN">:#,_@
v         >#     #<^
 Main dispatch loop: parse IRC messages.
>0:02p12pv
v        <    >     >0a".deliaf daer CRI">:#,_@
>12g0fff**21g#^R:#v_^
 vp11             <                                                         .
 0      >v                                                                  .
 >:11g\`|  coming here if this byte needs to be processed     emptycmd      .
 v      <> :12g+0g :a-#v_     v  and here if newline           v   0<       .
 #                     >:d-#v_> $:0\12g+0p 02g0G03P :12g+1+ 02p 03g!|       .
 ^+1$                       <                                  <            .
  end of bytes from irc                                                     .
 >12g+12pv  updated eptr                                                    .
 v       <                                      toggle to print raw:        .
  have to memmove message                     v$_,#! #:<"RAW >>> "0 <       .
      v      +1 p0 -g20 <                     >03G>:#,_$v                   .
 >02g >:12g\`! #v_ ::0g ^                      v" <<<"a0<                   .
^    p200p21-g20<                              >:#,_$               v       .
                            0 <-- dummy value to discard up there           .
  irc message handler       ^ return here when finished                     .
v>#                         ^#                                      <       .
                                                                            .
  check for prefix  v     +1<                                               .
> 03g':-#v_104p    1>:3g" "-|                                               .
v  0 p400< v     P41G31p3\0:<                                               .
v +1       <                                                                .
                                                                            .
  command start pos at stack                                                .
  find next space or 0                                                      .
> :31p>:3g:#v_     >\ :0\3p 31g3G15P v                                      .
            >:" "-!|                                                        .
      ^         +1$<                                                        .
v _v#!                         p13+1 <                                      .
0  1
0  0 command ends in nonzero, so at least one option
5  5 parse the options in a loop, :opt ends
p  p   v       <
   >31g :3g':-#^_ 1+          0\:v
       >:3g:#v_     >\ :0\3p 31g >3G 05g5+0\P v
             >:" "-!|
       ^         +1$<
   ^                   p50+1g50 _v#     p13+1 <
v                                < end of options

  irc message has been split, process it

 ^                                     _v#!-e<
  ping? pong!                           >  v
> 15G0"GNIP"Q#v_0ad"tognuf: GNOP"03P03e21g#vW^
v             <      v"Pong send failed."a0<
                     >:#,_@
 ^              <
  privmsg!
> 15G0"GSMVIRP"Q|
 ^_v#-g14g70    <
 ^                  <
     parse privmsg    target/prefix for reply
   >06g'#-!#v_ 04g!#^_ 1>:4g:!#v_'!-#v_v
   v        <        P60 G41 $$<0 p4\ 0<
      is chan           ^          +1<

     actual command-character commands
 ^                         <         <             <   <
    "^reload"        >04g!#^_f2G14GQ#^_    "SYOT"4#^(                        ^
   >17G6L 0"daoler"Q!|                                 ^$_,#! #:<"Reloaded."a0<
   v                 <
                    check prefix
    "^raw"        >04g!#v_f2G14GQ#v_ 57GN51p03P 51g:d\3p1+:a\3p1+ v
   >17G4L0" war"Q!|                  >    >0a".deliaf dnes waR"    >:#,_@
   v              <     <         < _^#!-W^#             g12\3\0: <
                             >$1-     v
    "^bf"        > 4 >:7g:#v_^  >:0\7p>1+51p 0": "06GA0" GSMVIRP"A 081p 88+:*: 91p v
   >17G3L0" fb"Q!|         >'!-!|       v8\0:-1< **aaa P30p17+2p16:N         p1a-1 <
 ^               <   ^        +1<       >p:!#v_^         output msg prep
   . v 40                                   $<0 p740  $<           <
   . > :0\ > :7g :#v_$$!#v_ >$0ad".][ dehctamsiM" 61g3P   61ge+61p ^
   . v                   <  ^       $$<
   .               >:'[-#v_$\1+\v
   .                     >']-#v_ \:#v_^
   .       ^                +1< <\-1<
   .           >0ad"!emit fo tuo... "61g3P 61gf1++61p $^
   . v +1     _^#!` ***aaaa p18:+1g18     <     < <           <  <       <
   . > :7g :!#v_ :'+-#v_$ \::8g1+91g%\8p\ ^
   . v+2g16$$$<       >:'--#v_$ \::8ga1g+91g%\8p \^
   . >::71g-!#v_0\3\21g v   >:'>-#v_$ \1+aaa**%\^
 ^ .#       $$<_v#!-Wv# <         >:'<-#v_$ \aaa**1-+ aaa**%\ ^
   .   no out^  >    > v v_v#-,':_v#-.':<     > v    +<v\ P3g16"  ..."0< ^   p3\a+1<
   .  v"BF W failed."a0< : $      >$ \:8g:ff+`| >61g3p \61g1+:61p ff*`#^_ >61g:d\3p^
   .  >:#,_@             ' >\:51g7g:#v_\8p\  v>$fff1++^> 61g4+61p :1+0\7p ^ must add
   .  v \1 \_v#g8:\<     [ v+1g15\p8\<       >                   ^         crlf here
   .         >\   v      - >51p \>\          ^   >']-#v_\1-:#v_$ ^
   .  >1-:7g:']-v  |!-]' _$ \:8g#^_\ 1\>1+:7g:'[-|           \
   .  ^   \+1\$<!  v                   ^    \+1\$<
   .  ^      < ^_v                     ^              <      <
   .         |-['<>>  >                                          ^
   .         >\1-:#v_$^
   .  ^           \<
   .
   .
  next
  cmd


fungespace storage:
 (*,0): data packet storage
 (*,1): misc. variables
  (0,1): server IP address
  (1,1): often data packet length
  (2,1): server socket
  (3,1): at message-splitting, start of current command/option
  (4,1): command character
  (5-10,1): temp
  (15-,1): bot's nickname
 (*,2): socket message-splitting vars
  (0,2): start of message
  (1,2): end of message
  (15-,2): owner prefix
 (*,3): current raw irc message to handle/also reply packet
 (*,4-x): parsed irc message
  (0,4): 1 if prefix, 0 if not
  (1-x,4): the prefix string if (0,4) is 1
  (0,5): amount of command options, 0..15
  (1-x,5): command string (always)
  (*,6-x): command options, depending on amount

brainfuck interp uses:
 (5,1): input string position (x, y=7)
 (6,1): output message position (x, y=3)
 (7,1): output message start (to check if any; +2 for crlf)
 (8,1): cycle count for limit
 (9,1): 256; for modulo
 (a,1): 255: for modulo
 top of stack (at start): input program position (x, y=7)
 second on stack: input data array position (x, y=8)

--- this code block prints out parts of the IRC message         ---
--- if you put it at the point where the message has been split ---

> 04g!#v_ 0" :xiferP">:#,_$ 14G>:#,_$ a, v
v      <                                 <
> 0" :dnammoC">:#,_$ 15G>:#,_$ a, v
   v1 $_,#! #:<"arguments:"0.g50  <
   >   :05g` #v_ "' ",,  v
   ^+1,''$_,#! #:<G\0+5: <
 ^         ,a <
